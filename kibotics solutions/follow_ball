# -*- coding: utf-8 -*-
import sys, time
sys.path.insert(0, '/usr/local/lib/python2.7')
sys.path.insert(0, '/opt/jderobot/lib/python2.7')
import PiBot 

# Creamos el objeto robot
robot = PiBot.dameRobot()

CENTRO_X = 200 # image size 400(ancho)x300(alto)
MARGEN = 20 #pixeles
LAST_GIRO = 'derecha'

def no_encuentra():
    return robot.dameObjeto() == (None,None)

def pelota_derecha(x):
    return x >= CENTRO_X+MARGEN

def pelota_izquierda(x):
    return x <= CENTRO_X-MARGEN

def calculo_giro(x):
    desviacion = abs(CENTRO_X - x)
    giro = 0.55*desviacion
    return giro

def girar(x):
    global LAST_GIRO
    
    if pelota_derecha(x):
        giro = calculo_giro(x)
        robot.girarDerecha(giro)
        LAST_GIRO = 'derecha'
    elif pelota_izquierda(x):
        giro = calculo_giro(x)
        robot.girarIzquierda(giro)
        LAST_GIRO = 'izquierda'

    robot.avanzar(0.3) # velocidad constante a la que se mueve la bola
        
def control_distancia():
    area = robot.dameObjeto()[1]
    print 'AREA: ', area

    if 1300 < area <= 1600:
        robot.parar()
    elif 1600 < area <= 1800:
        robot.retroceder(0.3)
    elif 1800 < area <= 2000:
        robot.retroceder(0.4)
    elif 2000 < area <= 2100 :
        robot.retroceder(0.5)
    elif area > 2100:
        robot.retroceder(0.6)

while True:

    if no_encuentra():
        global LAST_GIRO

        if LAST_GIRO == 'izquierda': 
            robot.girarIzquierda(1.2)
        else:
            robot.girarDerecha(1.2)
            
        continue

    try:        
        x = robot.dameObjeto()[0][0]
        girar(x)
        control_distancia()         
    except TypeError: # justo cuando cuentra la pelota toma datos pero ya se ha vuelto a perder.
        continue
